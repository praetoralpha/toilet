package libWebsiteTools;

import java.io.IOException;
import javax.servlet.DispatcherType;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import libWebsiteTools.tag.RequestToken;

/**
 * filter to check HTTP POST requests for security tokens generated by the h:RequestToken tag.
 * token checking can be disabled if a SecurityTokenChecker.DISABLE_TOKEN_CHECKING attribute is on the servlet context or session. referrer checking can be disabled if a SecurityTokenChecker.DISABLE_REFERRER_CHECKING attribute/parameter is present on the servlet context, session, or request.
 * @author alpha
 * @see libWebsiteTools.tag.RequestToken
 * @see libWebsiteTools.RequestTokenBucket
 */
@WebFilter(filterName="Request Token Checker", description="Checks for request tokens on POST requests.", dispatcherTypes = {DispatcherType.REQUEST}, urlPatterns={"/*"})
public class RequestTokenChecker implements Filter {

    public static final String DISABLE_REFERRER_CHECKING = "$_LIBWEBSITETOOLS_DISABLE_REQUEST_TOKEN_REFERRER_CHECKING";
    public static final String DISABLE_TOKEN_CHECKING = "$_LIBWEBSITETOOLS_DISABLE_REQUEST_TOKEN_CHECKING";
    public static final String ORIGINAL_REQUEST_URL = "$_LIBWEBSITETOOLS_ORIGINAL_REQUEST_URL";

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest req = (HttpServletRequest) request;
        if (req != null && !check(req)) {
            request.getInputStream().close();
            response.getOutputStream().close();
            return;
        }
        req.setAttribute(ORIGINAL_REQUEST_URL, getTokenURL(req));
        chain.doFilter(request, response);
    }

    /**
     * check for the security token on the request.
     * @param req
     * @return true if everything passed
     * @throws SecurityTokenInvalidException if request is fraudulent
     */
    private boolean check(HttpServletRequest req) {
        if ("POST".equalsIgnoreCase(req.getMethod()) && req.getServletContext().getAttribute(DISABLE_TOKEN_CHECKING) == null && req.getServletContext().getInitParameter(DISABLE_TOKEN_CHECKING) == null) {
            if (req.getSession(false) == null || req.getParameter(RequestToken.ID_NAME) == null) {
                throw new RequestTokenInvalidException();
            }
            if (req.getSession().getAttribute(DISABLE_TOKEN_CHECKING) != null) {
                return true;
            }
            RequestTokenBucket bucket = RequestTokenBucket.getRequestTokenBucket(req);
            if (req.getServletContext().getAttribute(DISABLE_REFERRER_CHECKING) == null && 
                    req.getSession().getAttribute(DISABLE_REFERRER_CHECKING) == null && 
                    req.getAttribute(DISABLE_REFERRER_CHECKING) == null &&
                    req.getParameter(DISABLE_REFERRER_CHECKING) == null) {
                if (!bucket.claimToken(req.getParameter(RequestToken.ID_NAME), req.getHeader("referer"))){
                    throw new RequestTokenInvalidException();
                }
            }
            else {
                if (!bucket.claimToken(req.getParameter(RequestToken.ID_NAME))) {
                    throw new RequestTokenInvalidException();
                }
            }
        }
        return true;
    }

    public static String getTokenURL(HttpServletRequest req){
        String url=req.getRequestURL().toString();
        if (!"https".equals(req.getScheme()) && req.getQueryString()!=null){
            url+="?"+req.getQueryString();
        }
        return url;
    }

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }

    @Override
    public void destroy() {
    }
}
